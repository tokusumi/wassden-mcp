name: Debug Mock Investigation

on:
  push:
    branches: [ add-experiment-framework ]
  pull_request:
    branches: [ main, add-experiment-framework ]
  workflow_dispatch:

jobs:
  debug-mock:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dev dependencies
      run: uv sync --extra dev

    - name: Debug Environment Info
      run: |
        echo "=== Python Info ==="
        uv run python --version
        uv run python -c "import sys; print(f'Python executable: {sys.executable}')"
        uv run python -c "import sys; print(f'Python path: {sys.path[:5]}')"
        echo ""
        echo "=== Package Info ==="
        uv run python -c "import wassden; print(f'wassden location: {wassden.__file__}')"
        uv run python -c "from wassden.clis.experiment import _run_experiment_async; print(f'Function location: {_run_experiment_async.__code__.co_filename}')"

    - name: Run Debug Mock Investigation
      run: |
        echo "=== Running Debug Tests ==="
        uv run pytest tests/debug_mock_investigation.py -v -s --tb=short
        
    - name: Debug Specific Failing Test
      run: |
        echo "=== Running Specific Failing Test with Debug ==="
        uv run pytest tests/unit/test_experiment_cli_async.py::TestExperimentAsyncImplementations::test_run_experiment_async_implementation -v -s --tb=long

    - name: Compare Local vs CI Mock Behavior  
      run: |
        echo "=== Direct Mock Test ==="
        uv run python -c "
        from unittest.mock import patch, AsyncMock
        print('Testing direct mock application...')
        
        # Test 1: Basic patch
        with patch('wassden.clis.experiment._run_experiment_async', new_callable=AsyncMock) as mock:
            from wassden.clis.experiment import _run_experiment_async
            print(f'Mock is applied: {_run_experiment_async is mock}')
            print(f'Mock object: {mock}')
            print(f'Function object: {_run_experiment_async}')
        "

    - name: Test Alternative Mock Strategies
      run: |
        echo "=== Testing Alternative Mock Strategies ==="
        uv run python -c "
        import sys
        sys.path.insert(0, '.')
        
        # Strategy A: Module-level patch
        import wassden.clis.experiment
        from unittest.mock import AsyncMock
        
        original = wassden.clis.experiment._run_experiment_async
        mock_func = AsyncMock()
        wassden.clis.experiment._run_experiment_async = mock_func
        
        from wassden.clis.experiment import _run_experiment_async
        print(f'Direct module patch works: {_run_experiment_async is mock_func}')
        
        # Restore
        wassden.clis.experiment._run_experiment_async = original
        "